19:35 09/01/2020

Requisitos:
- MongoDB Community Server (v3.4 usado no curso) :: https://www.mongodb.com/download-center/community
- NodeJS (v 6.10.0 usado no curso) :: https://nodejs.org/en/
- cmder
- Visual Studio Code
- Git

Sobre o React
O React é um framework com foco muito forte na View e na questão dos componentes e na relação entre os componentes, ou seja, não está preocupado com:
- requisições de HTTP Client para fazer requisições AJAX
- gerenciamento de estado da app (embora tenha recursos que ajudam nisso)


-------------------------------------------------------
Formas de criar novo app React:
-------------------------------------------------------
https://pt-br.reactjs.org/docs/create-a-new-react-app.html

Podemos instalar um módulo do Node que cria uma app React:
- npm i -g create-react-app (usar sudo)
Depois para instalar uma nova app React:
- create-react-app nome-app

Outra forma de criar uma app React:
- npx create-react-app my-app

# Resolução de problemas

Caso a criação do app React dê problemas:
- Primeiro usa esse comando no CMD:     npm rm -g create-react-app
- Depois usa esse comando:              npm install -g create-react-app
- E por fim cria o projeto:             npx create-react-app my-app


-------------------------------------------------------
Instalação de módulos e package.json
-------------------------------------------------------

# Comandos básicos do Node

Iniciar um projeto Node
- npm init

Iniciar um projeto Node diretamente com todas as perguntas respondidas automaticamente com YES
- npm init -y

# Flags

-E          instalar um módulo exato 
--save      salva as dependências num arquivo => salva um módulo que será preciso tanto para o modo dev como para prod
--save-dev  instala módulos necessários apenas para o modo de dev

# Módulos do Node

body-parser
Realiza o parse de strings no formato JSON para objetos JavaScript, assim como faz parse de dados de formulário.

express
Framework web.

mongoose
Biblioteca responsável por acessar o DB, faz o mapeamento dos objetos JS em documentos no MongoDB e realiza validações.

node-restful (https://github.com/baugarten/node-restful())
Simplifica a construção de APIs.

pm2
Loucher, responsável por iniciar uma aplicação. Usado na parte de produção. Na parte dev podemos usar o Nodemon.


-------------------------------------------------------
Rodar código
-------------------------------------------------------

- npm run dev

Exemplo: nas pastas 
F:\Dropbox\Dantiii\Cursos\Udemy\react\curso-react-redux\my-money-app\frontend
e
F:\Dropbox\Dantiii\Cursos\Udemy\react\curso-react-redux\my-money-app\backend

Fazer o comando:
- npm i (para instalar as dependências)

Depois rodar dentro das duas pastas o comando:
- npm run dev

Aceder no browser, o endereço:
- http://localhost:8080/



-------------------------------------------------------
Links interessantes
-------------------------------------------------------

Color Hunt
https://colorhunt.co/

colorhunt-726a95709fb0a0c1b8f4ebc1: "189676"
colorhunt-726a95709fb0a0c1b8f4ebc1: "189676"

Pretty gradients
https://uigradients.com/#ColorsOfSky


-------------------------------------------------------
Configugar e Rodar Aplicação React
-------------------------------------------------------

Config ::

Usar o pacote "create-react-app" => pacote que ajuda a criar e configurar uma app React de forma automatizada
Primeiro devemos instalar o pacote no nosso sistema:

- npm install -g create-react-app

Para iniciar uma nova app React:
- create-react-app nome-app

Rodar ::

Dentro da pasta raiz da nova app, rodar o comando:
- npm start

A app será iniciada no seguinte local:
  Local:            http://localhost:3000/
  On Your Network:  http://192.168.1.67:3000/


-------------------------------------------------------
JSX
-------------------------------------------------------

// JSX :: é uma sitaxe, parecida com HTML, que é convertido para código JS.
// Comparação de método manual vs JS para a criação de uma lista com elementos:

// Exemplo para criação de uma lista com JSX
const elemento = document.getElementById('root')
ReactDOM.render(
    <ul>
        <li>Um</li>
        <li>Dois</li>
        <li>Três</li>
    </ul>
    , elemento)

// Método para criar uma lista com elementos em JS puro:
let lista = document.createElement('ul')

let item = document.createElement('li')
let texto = document.createTextNode('João')
item.appendChild(texto)
lista.appendChild(item)

let item = document.createElement('li')
let texto = document.createTextNode('Maria')
item.appendChild(texto)
lista.appendChild(item)

const elemento = document.getElementById('root')


-------------------------------------------------------
Aulas 11, 12, 13 - Componentes
-------------------------------------------------------

Permite organizar uma app baseado nos conceitos da app => Criar componentes para a aplicação, ou seja, pedaços isolados da app, contendo seu próprio escopo: comportamentos com JS, estrutura HTML com o uso do JSX e CSS.
Então, passamos a ter uma app com pequenos componentes, um colaborando com o outro.

Antigamente o código era separado baseado nas tecnologias e hoje tudo isso está junto dentro de um componente.

Existem 2 tipos de componentes:
- baseados em função
- baseados em classe

# Coponente baseado em função
- Ficheiro componentes/PrimeiroComponente.jsx

import React from 'react'

function primeiro() {
    return <h1>Primeiro Componente!</h1>
}

export default primeiro

- Pode ser também exportado como uma função anônima:

import React from 'react'

export default function () {
    return <h1>Primeiro Componente!</h1>
}

- No ficheiro onde vai ser utilizado o componente deverá fazer o import e depois colocar a tag do componente no local a ser usado.
import PrimeiroComponente from './componentes/PrimeiroComponente'
...
ReactDOM.render(
    <div>
        <PrimeiroComponente></PrimeiroComponente>
        <PrimeiroComponente /> {/* Outra forma de chamar a tag de um componente */}
    </div>
, elemento)


-------------------------------------------------------
Aula 14 - Usando props
-------------------------------------------------------

Passa-se um parametro "props" para a função
Pode acessar com {props.valor}
Na component (tag do componente) enviar o valor: <MeuComponente valor=""Bom dia!" />



-------------------------------------------------------
Aula 15 - React.Fragment: Retornar elementos adjacentes
-------------------------------------------------------
Soluções para retornar múltiplos elementos adjacentes (um ao lado do outro)

// Solução 03. Retornar um array de elementos
export default props => [
    <h1>Paarte 1</h1>,
    <h1> Parte 2</h1>
]

// Solução 02. No HTML gerado não heverá nenhuma tag a envolver os elementos "Parte 1" e "Parte 2" 
export default props =>
    <React.Fragment>
        <h1>Paarte 1</h1>
        <h1>Paarte 2</h1>
    </React.Fragment>

    Uma forma reduzida de usar o React.Fragment é usar somente <>, mas desta forma nao pode passar atributo nesta tag do "Fragment", caso necessite.
    <>
        <h1>Paarte 1</h1>
        <h1>Paarte 2</h1>
    </>


// Solução 01. Mais usada!
export default props =>
    <div>
        <h1>Paarte 1</h1>
        <h1>Paarte 2</h1>
    </div>

-------------------------------------------------------
Aula 16 - Componente App e Arrow Functions (curso novo)
-------------------------------------------------------
Opções de como exportar uma função num componente.

(opção 1) :: Usar "export default" retornando função nomeada ou anônima

// forma 1
export default function myFunction() {
    return (...)
}

// forma 2
export default function() {
    return (...)
}

(opção 3) :: Usar "export function" para retornar funcao anonima utilizando a sintaxe de arrow function

// sem passar parametros
export function () =>  {
    return (...)
}

// passando um param
export function props =>  {
    return (...)
}

// outra maneira para simbolizar a passagem de apenas um param (_)
export function _ =>  {
    return (...)
}

// também assim entre parenteses
export function (_) =>  {
    return (...)
}

(opção 4) :: Podemos remover o corpo da função {}, tendo que retirar o "return", pois obrigatoriamente já estamos retornando de forma implícita tudo o que está na função.
export function () =>
    <>
        <h1>My Title</h1>
    </>

-------------------------------------------------------
Aula 19 (antigo 18 e 19) - Relacao entre componentes
-------------------------------------------------------

// --- indes.js

<h3>Realção entre componentes #01</h3>
        <FamiliaSilva />

        <hr />

        <h3>Realção entre componentes #02</h3>
        <Familia>
            <Membro nome="Andre" sobrenome="Pereira" />
            <Membro nome="Mariana" sobrenome="Pereira" />
        </Familia>

        <Familia>
            <Membro nome="Bia" sobrenome="Aruda" saudacao="Oi!" />
            <Membro nome="Gustavo" sobrenome="Aruda" />
        </Familia>

// --- FamiliaSilva

import React from 'react' // precisa deste import pora usar o JSX
import Membro from './Membro' // Membro.jsx será uma dependencia do componente FamiliaSilva.jsx

export default props =>
<div>
    {/* Criacao de 4 instancias do componente Membro */}
    <Membro nome="Rafael" sobrenome="Silva"/>
    <Membro nome="Daniela" sobrenome="Silva"/>
    <Membro nome="Pedro" sobrenome="Silva"/>
    <Membro nome="Ana" sobrenome="Silva"/>
</div>

// --- Familia

import React from 'react'

export default props =>
    <div>
        <h1>Família</h1>
        {props.children} {/* Aqui estarao todos os componentes filhos do componente Familia */}
    </div>



-------------------------------------------------------
Aula 21 (novo) - Passando estilos a um componente
-------------------------------------------------------

// --- App.jsx

<Card color="#FA6900"> <-------- passando um attr a um componente
    <Aleatorio min={1} max={60} />
</Card>

// --- Card.jsx

import './Card.css'
import React from 'react'

export default props => {

    const cardStyle = { <-------- criando um obj para passar como estilos ao componente
        backgroundColor: props.color || '#F00', <-------- se nao receber uma cor nos props, aplica a cor "#F00" como padrão
        borderColor: props.color || '#F00'
    }

    return (
        <div className="Card" style={cardStyle}> <-------- aplicação do estilo
            <div className="Title">{props.titulo}</div>
            <div className="Content">
                {props.children}
            </div>
        </div>
    )
}


-------------------------------------------------------
Aula 20 - Relacao direta entre componentes
-------------------------------------------------------
Objetivo: fazer com que uma propriedade de um elemento pai se propague para os elementos filhos.

// --- index.js

<h3>Comunicação direta entre componentes</h3>
        <FamiliaSilva sobrenome="Silva Pereira">
            <Membro nome="Bia" />
            <Membro nome="Gustavo" />
        </FamiliaSilva>

// --- FamiliaSilva.jsx

import React from 'react'
import Membro from './Membro'

export default props =>
<div>
    <h2>Família com sobrenome passado como parametro</h2>
    <p>Forma poderosa e simples de passar patametros de um componente pai para um componente filho</p>
    <Membro nome="Ana" sobrenome={props.sobrenome}/>
    <Membro nome="Diana" sobrenome={props.sobrenome}/>
    <Membro nome="Adriana" sobrenome={props.sobrenome}/>
</div>


-------------------------------------------------------
Aula 23 (novo) 21 (antigo) - Propagando "props" para componentes filhos #01
-------------------------------------------------------

Método cloneElement() para clonar os "filhos" que a funcao recebeu , podendo passar propriedades para esses clones gerados.
Porém só permite que tenha um componente "Membro" filho.

// --- index.js

<Familia sobrenome="Pereira">
    <Membro nome="Andre" />
</Familia>

// --- Familia.jsx

import React from 'react'

export default props =>
    <div>
        <h1>Família</h1>

        {/* Passa todas as propriedades de uma vez por um clone, utilizando o operador spread { ...props } */}
        {React.cloneElement(props.children, { ...props })}

        {/* Passa todas as propriedades de uma vez pera referencia "props"
        {React.cloneElement(props.children, props)} */}
            
        {/* Propagando "props" para componentes filhos (maneira 1) */}
        {/* {React.cloneElement(props.children,
            {sobrenome: props.sobrenome })} */}
    </div>


-------------------------------------------------------
Aula 23 (novo) 22 (antigo) - Propagando "props" para componentes filhos #02
-------------------------------------------------------
Ao tentar compartilhar a propriedade do componente pai com mais de um filho, obtem o erro:
"Element type is invalid: expected a string(for built-in components) or..."
Isto acontece porque precisa percorrer um elemento por vez e clonar cada um. => Usar a função map()

No React existe uma versão da funcao map(). => {React.Children.map()}

Se temos acesso diretamente aos filhos (às propriedades dos componentes filhos) é fácil, basta pegar a propriedade do pai e passar para os filhos.
Quando temos apenas acesso à props.children, entao temos que usar as funções do React: React.Children.map() ... React.cloneElement().
..ou também usar o props.children.map()...

// --- index.js (completo)

import React from 'react' // needs this import to run JSX
import ReactDOM from 'react-dom'
import Familia from './componentes/Familia'
import Membro from './componentes/Membro'

const elemento = document.getElementById('root')
ReactDOM.render(
    <div>
        <Familia sobrenome="Pereira">
            <Membro nome="Andre" />
            <Membro nome="Dante" />
            <Membro nome="Diana" />
        </Familia>
    </div>
, elemento)  

// --- Familia.jsx

import React from 'react'
export default props =>
    <div>
        {React.Children.map(props.children, filho => {
            return React.cloneElement(filho, { ...props })
        })}

        {/*
            // Opaco 1 :: props.children.map
            props.children.map((child, i) => {
                return React.cloneElement(child, { ...props, key: i })
            })
        */}
    </div>

Obs: também podemos colocar a funcao map() numa funcao de utilidde global, ex: utils.jsx


-------------------------------------------------------
Aula 25 (novo) - Repetição (listas)
-------------------------------------------------------

// --- data/alunos.js

export default [
    { id: 1, nome: "Ana", nota: 6.2 },
    { id: 2, nome: "Bia", nota: 7.6 },
    { id: 3, nome: "Carlos", nota: 8.1 },
    { id: 4, nome: "Daniel", nota: 5.7 },
    { id: 5, nome: "Gui", nota: 10.0 },
    { id: 6, nome: "Rebeca", nota: 9.5 },
    { id: 7, nome: "Arthur", nota: 7.7 },
    { id: 8, nome: "Pedro", nota: 6.9 },
    { id: 9, nome: "Gustavo", nota: 8.8 },
];

// --- components/repeticao/ListaAlunos.jsx

import React from 'react'
import alunos from '../../data/alunos'

export default props => {

    // Transformar um array de objetos alunos em um array de objetos JSX.
    const alunosListJSX = alunos.map(alunos => {
        return (
            <li key={alunos.id}>
                {alunos.id}. {alunos.nome} -> {alunos.nota}
            </li>
        )
    });

    return (
        <div>
            <ul style={{ listStyle: 'none' }}>
                {alunosListJSX}
            </ul>
        </div>
    );
}

# Desafio Repetição Usando Tabela

// --- produtos.js

const produtos = [
    { id: 1, nome: "Relógio Azul", preco: 6.578 },
    { id: 2, nome: "Pincel", preco: 2.999 },
    { id: 3, nome: "Conjunto de Canetas", preco: 3 },
    { id: 4, nome: "Fones XPTO", preco: 7 },
    { id: 5, nome: "Caderno Tribo", preco: 0.5 },
    { id: 6, nome: "Smartphone Asus", preco: 170 },
    { id: 7, nome: "Lego Espacial", preco: 45 },
];

export default produtos;

// --- components/repeticao/TabelaProdutos.css

.TabelaProdutos {
    background-color: 008b8b;
}
.TabelaProdutos th {
    background-color: #283cae;
    color: #fff;
}
.TabelaProdutos .Par {
    background-color: #ddd;
}
.TabelaProdutos .Impar {
    background-color: #ccc;
}


// --- components/repeticao/TabelaProdutos.jsx

import './TabelaProdutos.css'
import React from 'react'
import produtos from '../../data/produtos'

export default () => {
    // Usando rendericazao condicional na cor da tabela e no preco
    function getLinhas() {
        return produtos.map((produto, i) => {
            return (
                <tr key={produto.id} className={i % 2 === 0 ? 'Par' : 'Impar'}>
                    <td>{produto.id}</td>
                    <td>{produto.nome}</td>
                    <td>€ {produto.preco.toFixed(2).replace('.', ',')}</td>
                </tr>
            )
        })
    }

    return (
        <table className="TabelaProdutos" style={{ width: '100%' }} border="1">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Preço</th>
                </tr>
            </thead>
            <tbody>
                {getLinhas()}
            </tbody>
        </table>
    )
}


-------------------------------------------------------
Aula 27 (novo) - Renderização Condicional
-------------------------------------------------------

// --- App.js

<Card titulo="Aula 27 (ex #08) - Rendericazao Condicional #01" color="#982395">
    <ParOuImpar numero={21}></ParOuImpar>
</Card>

// --- conponents/condicional/ParOuImpar.jsx (utilizando operador ternário)

import React from 'react'

export default props => {
    const isPar = props.numero % 2 === 0
    return (
        <div>
            <span>O número {props.numero} é </span>
            {isPar ? <span>Par</span> : <span>Ímpar</span>}
        </div>
    )
}


-------------------------------------------------------
Aula 28 (novo) - Renderização Condicional de Componente e props.children
-------------------------------------------------------

// --- App.js

<Card titulo="Aula 27 (ex #08) - Rendericazao Condicional #01" color="#982395">
    <ParOuImpar numero={21}></ParOuImpar>
    <UsuarioInfo usuario={{ nome: 'Fernando' }} />
    <UsuarioInfo usuario={{ email: 'fer@nando.com' }} />
    <UsuarioInfo usuario={{}} />
    <UsuarioInfo />
</Card>

// --- conponents/condicional/If.jsx
// O componente apresenta os seus elementos filhos (props.children) se o atributo props.test for true.

export default (props) => {
    if (props.test) {
        return props.children;
    } else {
        return false;
    }
};

// --- conponents/condicional/UsuarioInfo.jsx
// Irá mostrar a informação dentro do componente <If> caso tenha sido passado o stributo usuario.nome

import React from 'react'
import If from './If'

export default props => {
    const usuario = props.usuario || {}
    return (
        <div>
            <If test={usuario && usuario.nome}>
                Seja bem vindo <strong>{usuario.nome}</strong>!
            </If>
            <If test={!usuario || !usuario.nome}>
                Seja bem vindo <strong>Amigão</strong>!
            </If>
        </div>
    )
}


-------------------------------------------------------
Aula 29 (novo) - Renderização Condicional de Componente <If><Else></Else></If>
-------------------------------------------------------

// --- App.js

<Card titulo="Aula 27 (ex #08) - Rendericazao Condicional #01" color="#982395">
    <ParOuImpar numero={21}></ParOuImpar>
    <UsuarioInfo usuario={{ nome: 'Fernando' }} />
    <UsuarioInfo usuario={{ email: 'fer@nando.com' }} />
    <UsuarioInfo usuario={{}} />
    <UsuarioInfo />
</Card>

// --- conponents/condicional/If.jsx
// O componente apresenta os seus elementos filhos (props.children) se o atributo props.test for true.

export default (props) => {
    // Encontrar o elemento <Else> que está dentro de <If>
    const elseChild = props.children.filter((child) => {
        return child.type && child.type.name === "Else";
    })[0]; // Como isto retorna um array, pegamos o 1º elem do array

    // Todos os elementos filhos que não sejam o Else
    const ifChildren = props.children.filter((child) => {
        return child !== elseChild;
    });

    // console.log("elseChild :: ", elseChild);

    if (props.test) {
        return ifChildren;
    } else if (elseChild) {
        return elseChild;
    } else {
        return false;
    }
};

export const Else = (props) => props.children;

// --- conponents/condicional/UsuarioInfo.jsx
// Irá mostrar a informação dentro do componente <If> caso tenha sido passado o stributo usuario.nome

import React from 'react'
import If, { Else } from './If'

export default props => {
    const usuario = props.usuario || {}
    return (
        <div>
            {/* Aula 29 - Condicionais com Componentes If Else */}
            <If test={usuario && usuario.nome}>
                Seja bem vindo <strong>{usuario.nome}</strong>!
                <Else>
                    Seja bem vindo <strong>Amigão</strong>!
                </Else>
            </If>
        </div>
    )
}

-------------------------------------------------------
Aula 23 - Adicionando funcao em um componente funcional
-------------------------------------------------------

Alguns conceitos básicos de componente funcional:
- quando usa arrow function pode eliminar as chavetas {} e o return dentro dela, caso esteja retornando apenas um elemento.
- quando utiliza function com {} precisa explicitamente usar o "return".

O componente funcional é um componente sem estado (stateless)
(!) A partir do React 16.8 um componente Funcional pode ter estado.

// --- indes.js

import ComponenteComFuncao from './componentes/ComponenteComFuncao'
...
<ComponenteComFuncao />

// --- ComponenteComFuncao

import React from 'react'

export default props => {
    const aprovados = ['Paula', 'Roberta', 'Gustavo', 'Julia']

    // Receber os itens e transformá-los em elementos do tipo JSX
    const gerarItens = itens => {
        // Funcao map() transforma elementos do Array em outros elementos
        return itens.map(item => <li>{item}</li>)
    }

    // Retornando uma expressao
    return (
        <ul>
            {gerarItens(aprovados)}
        </ul>
    )
}


-------------------------------------------------------
Aula 30 (novo) - Comunicacao direta (via props)
-------------------------------------------------------

// --- App.jsx

<Card titulo="Aula 30 (ex #09) - Comunicação Direta" color="#59323C">
    <DiretaPai></DiretaPai>
</Card>

// --- DiretaPai.jsx

import React from 'react'
import DiretaFilho from './DiretaFilho'
export default props => {
    return (
        <div>
            <DiretaFilho nome="Junior" idade={20} nerd={true}></DiretaFilho>
            <DiretaFilho nome="Gabriel" idade={17} nerd={false}></DiretaFilho>
        </div>
    )
}

// --- DiretaFilho.jsx

import React from 'react'
export default props => {
    return (
        <div>
            <span>{props.nome} </span>
            <span>{props.idade} </span>
            <span>{props.nerd ? 'Verdadeiro' : 'Falso'}!</span>
        </div>
    )
}

-------------------------------------------------------
Aula 31 (novo) - Comunicacao indireta entre componentes - React Hooks
-------------------------------------------------------

O componente pai passa via props uma funcao para o filho
e o filho usa essa função passando uma info para o pai.

(!) A partir do React v16.8 os componentes funcionais passaram ter estado

// --- App.jsx

<Card titulo="Aula 31 (ex #10) - Comunicação Indireta" color="#8BAD39">
    <IndiretaPai></IndiretaPai>
</Card>

// --- componentes/basicos/comunicacao/IndiretaPai.jsx

import React, { useState } from 'react'
import InditeraFilho from './IndiretaFilho'

export default props => {

    // Somente com estas vars a info nao será atualizada neste componente pai,
    // isto precisa ser implementado com estado.
    // let nome = ''
    // let idade = 0
    // let nerd = false
    // A função useState retorna um array com duas poesicoes:

    // - [0]: o valor
    // - [1]: função usada para alterar o valor

    // Utilizando o destructuring, podemos receber as duas posições numa mesma linha de code
    const [nome, setNome] = useState('?')
    const [idade, setIdade] = useState(0)
    const [nerd, setNerd] = useState(false)

    console.log('nome inicial: ', nome)

    function fornecerInformacoes(nome, idade, nerd) {
        setNome(nome)
        setIdade(idade)
        setNerd(nerd)
    }

    return (
        <div>
            <div>Pai</div>
            <span>{nome}</span>
            <span> <strong>{idade}</strong></span>
            <span> {nerd ? 'Verdadeiro' : 'Falso'}</span>
            <InditeraFilho quandoClicar={fornecerInformacoes}></InditeraFilho>
        </div>
    )
}

// --- componentes/basicos/comunicacao/IndiretaFilho.jsx

import React from 'react'

export default props => {
    const callBack = props.quandoClicar
    const gerarIdade = () => parseInt(Math.random() * (20)) + 50 // 20 é o range e 50 é o valor mínimo
    const gerarNerd = () => Math.random() > 0.5
    return (
        <div>
            <div>Filho</div>
            <button onClick={_ => callBack('João', gerarIdade(), gerarNerd)}>Fornecer Informações</button>
        </div>
    )
}

// O símbolo underline (_) na arow function do botão significa que não me interesso em receber o event

/* Versão do botão com function()
<button onClick={
    function (e) {
        props.quandoClicar('João', 53, true)
    }
}>Fornecer Informações</button>
*/


-------------------------------------------------------
Aula 33 - Componente Controlado
-------------------------------------------------------
// Formulários :: https://pt-br.reactjs.org/docs/forms.html

// Fluxo unidirecional muito important no React:
// Somente quando o estado muda é que o componente muda (visual do componente) 

// --- App.jsx

<Card titulo="Aula 33 (ex #11) - Componente Controlado" color="#E45F56">
    <Input></Input>
</Card>

// --- components/formulario/Input.jsx

import './Input.css'
import React, { userState, useState } from 'react'

export default props => {

    const [valor, setValor] = useState('Inicial')

    function quandoMudar(e) {
        console.log(e.target.value)
        setValor(e.target.value)
    }
    return (
        <div className="Input">
            <h2>{valor}</h2>
            <div style={{
                display: 'flex',
                flexDirection: 'column'
            }}>
                <h3>Controlled component</h3>
                <input value={valor} onChange={quandoMudar} />

                <h3>Controlled component (read only)</h3>
                <input value={valor} readOnly disabled />

                <h3>Uncontrolled component</h3>
                <input value={undefined} />
            </div>
        </div>
    )
}

-------------------------------------------------------
Aula 24 (antigo) - Comunicacao indireta entre componentes
-------------------------------------------------------

O componente pai passa via props uma funcao para o filho
e o filho usa essa função passando uma info para o pai.

// --- index.js

import Pai from './componentes/Pai'
...
<Pai />

// --- Pai.jsx

import React from 'react'
import Filho from './Filho'

export default props => {
    const notificarSaidaDoFilho = lugar => alert(`Liberado para ${lugar}`)
    return (
        <div>
            <Filho notificarSaida={notificarSaidaDoFilho} />
        </div>
    )
}

// --- Filho.jsx

import React from 'react'

// O filho vai receber uma funcao como param através do props, e esta funcao podera ser chamada passando algum valor
export default props =>
    <div>
        <p>Etse botao será chamado sempre que o componente filho for avisar para o componente pai, que vai sair. E passa pro pai a dizer qual é o local que vai sair.</p>
        <p>O comp pai passa uma funcao via props, e no filho quando acontecer um evento, essa funcao é chamada de volta notificando o pai.</p>
        <button
            onClick={() => props.notificarSaida('praia')}>
            Vou Sair
        </button>

        {/* Se quisesse enviar um objeto com várias infos, no lugar da string, basta fazer:
        onClick={() => props.notificarSaida({"lugar": 'praia', "hora": 15})}>
        E no pai, basta aceder com "data.lugar" e "data.hora". */}
    </div>

    
-------------------------------------------------------
Aula 34 (novo) 25 (antigo) - Componente de classe (Hello World de uma classe)
-------------------------------------------------------
Numa classe, podemos aceder aos props através do "this".

// --- indes.js

import Pai from './componentes/ComponenteClasse'
...
<ComponenteClasse />

// --- ComponenteClasse.jsx

import React, { Component } from 'react'

export default class ComponenteClasse extends Component {
    render() {
        return (
        <h1>{this.props.valor || 'Valor pardão'}</h1>
        )
    }
}

// Outra opção seria referenciar com React.Component:
/*
import React from from 'react'
export default class ComponenteClasse extends React.Component {}
*/


-------------------------------------------------------
Aula 34 (novo) 27 (antigo) - Componente de Classe Contador
-------------------------------------------------------

Um componente baseado em classe obrigatoriamente precisa ter o método render(), 
que vai ser o método responsável por renderizar o o componente. Um método funcional, a própria função
já é responsável por renderizar, porque o React espera que o retorno de um componente funcional 
sejo o JSX, e  no caso de um componente baseado em classe, ele vai chamar a função render().

Aula 28 - Problema do this
O this pode variar de acordo com quem chama a função. O this, numa função tradicional do JavaScript, 
não está relacionado ao local que a função foi escrita, mas sim, quem está chamando a função.

No caso do programa Contador, quem está chamando a função é o browser, a partir do evento do click.

// --- Soluções para conseguir usar o this em toda a classe

// Solução 01 :: bind(this) da função no construtor da classe
constructor(props) {
    super(props)
    this.maisUm = this.maisUm.bind(this) // no construtor, o this aqui dentro realmente aponta para a instância atual
}

// Solução 02 :: Uso de arrow function no onClick (invocar a funcao dentro de uma funcao arrow, ela garante que o this será associado ao local que a função foi escrita)
A partir do ECMAScript 2015 surgiu a funcao arrow, e ela trata o this associado ao contexto léxico
<button onClick={() => this.maisUm()}>Inc</button>

// Solução 03 :: Transformar a função maisUm() numa variável que recebe uma arrow function
maisUm = () => {
    //this.state.numero++
    console.log(this)
}

(!) Tudo o que se recebe via propriedade não pode ser mudado, ou seja, é "ready only".
Logo, não é possível alterar um valor do props. Para isso, devemos utilizar estado, conseguindo assim, modifincar algo dentro do componente.

Erro ao tentar alterar um props:
TypeError: Cannot assign to read only property 'nota' of object '#<Object>'


# Implementação da aula 34 (novo)


// --- App.jsx

<Card titulo="Aula 34 (ex #12) - Componente Classe (Contador)" color="#424242">
    <Contador numeroInicial={10}></Contador>
</Card>

// --- components/contador/Contador.jsx

import './Contador.css'
import React from 'react'

class Contador extends React.Component {

    // Aqui pode ser implementado o método construtor, deixando o state dentro
    // constructor(props) {
    //     super(props)
    //     this.state = {
    //         numero: props.numeroInicial
    //     }
    // }

    // Definir estado dentro de um componente baseado em classe
    state = {
        numero: this.props.numeroInicial || 0,
        passo: this.props.passoInicial || 5,
    }

    // constructor(props) {
    //     super(props)
    //     this.inc = this.inc.bind(this) // no construtor, o this aqui dentro realmente aponta para a instância atual
    // }

    inc = () => {
        this.setState({
            numero: this.state.numero + this.state.passo
        })
    }

    dec = () => {
        this.setState({
            numero: this.state.numero - this.state.passo
        })
    }

    // Implementacao com funcao arrow, para nao ter problema com o "this"
    setPasso = (evento) => {
        this.setState({
            passo: +evento.target.value // o sinal de + no início converte o valor de string -> int
        })
    }

    render() {

        // JSX retornado
        return (
            <div className="Contador">
                <h2>Contador</h2>
                <p>{this.state.numero}</p>
                <div>
                    <label htmlFor="passoInput">Passo: </label>
                    <input id="passoInput" type="number"
                        value={this.state.passo} onChange={this.setPasso} />
                </div>
                <button onClick={this.inc}>+</button>
                <button onClick={this.dec}>-</button>
            </div>
        )
    }
}

export default Contador
// Como temos algo nomeado, podemos exportar ao final.
// Tambem posso exportar diretamente na declaracao da classe

// --- components/contador/Contador.css

.Contador input {
    font-size: 1.4rem;
    width: 60px;
}

.Contador button {
    margin: 15px;
    height: 50px;
    width: 50px;
    border-radius: 50%;
    background-color: #1499d2;
    color: #fff;
    font-size: 1.4rem;
}


# Implementação da aula 27 (antigo)


// --- index.js

<Contador numeroInicial={10} />

// --- Contador.jsx

import React, { Component } from 'react'

export default class Contador extends Component {

    // Inicializa o estado do componente (poder feito diretamente na classe ou no construtor)
    state = {
        numero: this.props.numeroInicial
    }

    // Uso de arrow function para que o this funcione corretamente no contexto da classe.
    maisUm = () => {
        this.setState({ numero: this.state.numero + 1 })
        console.log(this)
    }

    menosUm = () => {
        this.setState({ numero: this.state.numero - 1 })
    }

    // Única funcao para realizar as duas operações de adicao e subtracao
    alterarNumero = diferenca => {
        this.setState({
            numero: this.state.numero + diferenca
        })
    }

    render() {
        return (
            <div>
                <div>Número: {this.state.numero}</div>
                {/* O botão abaixo passa a referência da função e não a chamada da função */}
                <button onClick={this.maisUm}>Inc</button>
                <button onClick={this.menosUm}>Dec</button>
                
                <button onClick={() => this.alterarNumero(10)}>Inc 10</button>
                <button onClick={() => this.alterarNumero(-10)}>Dec 10</button>
            </div>
        )
    }
}


-------------------------------------------------------
Aula 35 (novo)- Componente de Classe Contador (dividico em componentes)
-------------------------------------------------------

// --- contador/Contador.jsx

import './Contador.css'
import React from 'react'

import Display from './Display'
import Botoes from './Botoes'
import PassoForm from './PassoForm'

class Contador extends React.Component {

    // Aqui pode ser implementado o método construtor, deixando o state dentro
    // constructor(props) {
    //     super(props)
    //     this.state = {
    //         numero: props.numeroInicial
    //     }
    // }

    // Definir estado dentro de um componente baseado em classe
    state = {
        numero: this.props.numeroInicial || 0,
        passo: this.props.passoInicial || 5,
    }

    // constructor(props) {
    //     super(props)
    //     this.inc = this.inc.bind(this) // no construtor, o this aqui dentro realmente aponta para a instância atual
    // }

    inc = () => {
        this.setState({
            numero: this.state.numero + this.state.passo
        })
    }

    dec = () => {
        this.setState({
            numero: this.state.numero - this.state.passo
        })
    }

    // Implementacao com funcao arrow, para nao ter problema com o "this"
    setPasso = (novoPasso) => {
        this.setState({
            passo: novoPasso
        })
    }

    render() {

        // JSX retornado
        return (
            <div className="Contador">
                <h2>Contador</h2>
                <Display numero={this.state.numero} />
                <PassoForm passo={this.state.passo} setPasso={this.setPasso} />
                <Botoes setInc={this.inc} setDec={this.dec} />
            </div>
        )
    }
}

export default Contador
// Como temos algo nomeado, podemos exportar ao final.
// Tambem posso exportar diretamente na declaracao da classe

// --- contador/Display.jsx

import React from 'react'
export default props => {
    return (
        <h3>{props.numero}</h3>
    )
}

// --- contador/PassoForm.jsx

import React from 'react'
export default props => {
    return (
        <div>
            <label htmlFor="passoInput">Passo: </label>
            <input id="passoInput" type="number"
                value={props.passo}
                onChange={e => props.setPasso(+e.target.value)} />
            {/* o sinal de + no início converte o valor de string -> int */}
        </div>
    )
}

// --- contador/Botoes.jsx

import React from 'react'
export default props => {
    return (
        <div>
            <button onClick={props.setInc}>+</button>
            <button onClick={props.setDec}>-</button>
        </div>
    )
}

-------------------------------------------------------
Aula 37 (novo)- DEsafio Megassena
-------------------------------------------------------

// --- components/mega/Mega.jsx

import React, { useState } from 'react'
import './Mega.css'

export default props => {

    function gerarNumeroNaoContido(min, max, array) {
        const aleatorio = parseInt(Math.random() * (max + 1 - min) + min)
        return array.includes(aleatorio) ?
            gerarNumeroNaoContido(min, max, array) :
            aleatorio
    }

    function gerarNumeros(quant) {
        const numeros = Array(quant)
            .fill(0)
            .reduce((nums) => {
                const novoNumero = gerarNumeroNaoContido(1, 60, nums)
                console.log([...nums, novoNumero])
                return [...nums, novoNumero]
            }, [])
            .sort((n1, n2) => n1 - n2)
        return numeros
    }

    const [quant, setQuant] = useState(props.quantidade || 6)
    const numerosIniciais = gerarNumeros(quant) // Array(quant).fill(0)
    const [numeros, setNumeros] = useState(numerosIniciais)

    return (
        <div className="Mega">
            <h3>Gere um novo jogo surpresa de {quant} numeros</h3>
            <button onClick={_ => setNumeros(gerarNumeros(quant))}>Gerar Surpresa</button>
            <div>
                <label>Quantidade de números</label>
                <input min="6" max="15" type="number" value={quant} onChange={e => {
                    setQuant(+e.target.value)
                    setNumeros(gerarNumeros(+e.target.value))
                }} />
            </div>
            <p>Surpresinha: {numeros.join(', ')}</p>
        </div>
    )
}

// --- components/mega/Mega.css

.Mega label {
    margin-right: 10px;
}
.Mega input {
    font-size: 1.4rem;
    width: 50px;
}

-------------------------------------------------------
Aula 31 - React Hooks
-------------------------------------------------------

Introducing Hooks
https://reactjs.org/docs/hooks-intro.html

A partir da versão 16.8 do React, é possível alterar o estado dos componentes funcionais (feitos com função ao invés de classe), 
utilizando para isso, os Hooks.

// --- index.js

 <Hook />

// --- Hook.jsx

import React, { useState } from 'react'

// A partir do useState podemos instanciar um estado e temos disponível um método set
// O useState tem 2 campos (valor, método para alterar o valor)
// Podemos tanto usar um método de desestruturacao para receber os campos do useState,
// como também, associar o useState a uma variável e aceder aos índices desta var

export default props => {
    // Usando desestruturador: [var, funcao para alterar a var]
    const [contador, setContador] = useState(0)
    return (
        <div>
            <h1>{contador}</h1>
            <button onClick={() => setContador(contador + 1)}>Inc</button>
        </div>
    )
}

Outro uso importante dos Hooks é para aceder aos métodos do ciclo de vida do componente.

// --- Hook.jsx

import React, { useState, useEffect } from 'react'

export default props => {
    // Usando desestruturador: [var, funcao para alterar a var]
    const [contador, setContador] = useState(0)
    const [parOuImpar, setParOuImpar] = useState('par')

    // Funcao chamada sempre que o coponente é criado ou alterado
    useEffect(() => {
        contador % 2 == 0 ? setParOuImpar('Par') : setParOuImpar('Impar')
    })
    return (
        <div>
            <h1>{contador}</h1>
            <h3>{parOuImpar}</h3>
            <button onClick={() => setContador(contador + 1)}>Inc</button>
            <button onClick={() => setContador(contador - 1)}>Dec</button>
        </div>
    )
}


-------------------------------------------------------
Aula 48 - TodoApp - Config do backend 
-------------------------------------------------------

Documentação do node-restful
https://github.com/baugarten/node-restful

Inicialização do projeto:
- npm init -y
- npm install --save -E body-parser@1.15.2 express@4.14.0 mongoose@4.7.0 node-restful@0.2.5 pm2@2.15
- npm install --save-dev -E nodemon@1.11.0

/*
 * To testing API:
 * - run backend: npm run dev (use sudo if running on Linux)
 * - run Mongo: sudo mongod
 * - on Postman, choose POST
 * - API: http://localhost:3003/api/todos
 * - Choose Body >> x-www-form-urlencoded
 * - Choose key-value edit or Bulk edit:
 * - Insert: description: Concluir o curso de React.
 *
 * GET
 *
 * http://localhost:3003/api/todos
 *
 * Sorted desc
 * http://localhost:3003/api/todos?sort=-createdAt
 *
 * Sorted desc and using regex to filtering by some text
 * http://localhost:3003/api/todos?sort=-createdAt&description__regex=/curso/
 */

 # Soluções para rodar a app

 Devemos rodar o comando
 - npm run production
 para que este chame o pm2. Caso obtenha a info: "pme: command not found", pode resolver:
 - npm i pme -g
 - ./node_modules/.bin/pm2 [monit|status]


-------------------------------------------------------
Instalação do MongoDB
-------------------------------------------------------

Install Mongo
- sudo apt install mongodb-server-core
- sudo apt install mongodb-clients

Após a instalação do MongoDB, deve existir a seguinte estrutura de pasta do diretório raiz:
/data/db

No caso do Linux, deverá dar permissão à pasta:
sudo chmod -R go+w /data/db

Rodar o Mongo server (porta padrão é a 27017):
sudo mongod 
sudo mongod --port 27018

Nota: existirá uma DB com o nome "todo" e ao rodar as operações no frontend, irá gerar uma collection chamada "todos" dentro da DB "todo".

Mongo (comandos básicos) :: Rodar o Mongo Cli e pode verificar os registos com os comandos:
- show dbs
- show database
- use <database_name>
- show collections
- db.todos.find().pretty()

Criar DB e collection para inserir mock data:
- use todo
- db.todos.insertOne({description: "Minha tarefa", done: false, createdAt: new Date()})

-------------------------------------------------------
Aula 56 - TodoApp - Config do frontend 
-------------------------------------------------------

- mkdir frontend && cd frontend
- npm init -y (iniciar o package.json)

# Dependências

Webpack
- npm i --save-dev webpack@1.14.0 webpack-dev-server@1.16.2

Babel (para interpretar e fazer o transpiling do JSX usado no React)
- npm i --save-dev babel-core@6.22.1 babel-loader@6.2.10 babel-plugin-react-html-attrs@2.0.0 babel-plugin-transform-object-rest-spread@6.22.0 babel-preset-es2015@6.22.0 babel-preset-react@6.22.0

Processamento de CSS e carregamento de imagens e fonts
- npm i --save-dev extract-text-webpack-plugin@1.0.1 css-loader@0.26.1 style-loader@0.13.1 file-loader@0.9.0

extract-text-webpack-plugin     :: extrai os textos dos arquivos .CSS
css-loader                      :: realiza processos em cima do CSS
style-loader                    :: realiza processos em cima do CSS
file-loader                     :: carregar imagens e fonts dentro da config do Webpack

Template a ser utilizado
- npm i --save-dev bootstrap@3.3.7 font-awesome@4.7.0

Dependências relativas ao React
- npm i --save-dev react@15.4.2 react-dom@15.4.2 react-router@3.0.2 axios@0.15.3

axios                           :: client HTTP Promise based

Configuração inicial para uma app React (utilizada no TodoApp)

// --- todo-app/frontend/
package.json
{
  "name": "frontend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "axios": "^0.15.3",
    "babel-core": "^6.22.1",
    "babel-loader": "^6.2.10",
    "babel-plugin-react-html-attrs": "^2.0.0",
    "babel-plugin-transform-object-rest-spread": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.22.0",
    "bootstrap": "^3.3.7",
    "css-loader": "^0.26.1",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.9.0",
    "font-awesome": "^4.7.0",
    "react": "^15.4.2",
    "react-dom": "^15.4.2",
    "react-router": "^3.0.2",
    "style-loader": "^0.13.1",
    "webpack": "^1.14.0",
    "webpack-dev-server": "^1.16.2"
  }
}


# Para rodar o projeto TodoApp:
Rodar o MongoDB:      'sudo mongod' (ou: 'sudo mongod --port 27018')
Rodar o backend:      'sudo npm run dev' from backend folder (ou: 'sudo npm run production' para rodar o PM2)
Rodar o frontend:      'sudo npm run dev' from frontend folder


-------------------------------------------------------
Operações HTTP com Axios :: POST, GET, PUT, DELETE
-------------------------------------------------------

# Instanciação do Axios e criação de URL base

import axios from 'axios'
...
const URL = 'http://localhost:3003/api/todos'

# POST

handleAdd() {
    const description = this.state.description
    axios.post(URL, { description })
        .then(resp => { this.refresh(); console.log('Funcionou! :: ', description) })
}

# GET

refresh() {
    axios.get(`${URL}?sort=-createdAt`)
        .then(resp => this.setState({ ...this.state, description: '', list: resp.data }))
}

# DELETE

handleRemove(todo) {
    axios.delete(`${URL}/${todo._id}`)
        .then(resp => this.refresh())
}

# PUT

handleMarkAsDone(todo) {
    axios.put(`${URL}/${todo._id}`, { ...todo, done: true })
        .then(resp => this.refresh())
}


-------------------------------------------------------
Aula 71 - Evento Adicionar (Integração Backend) :: POST
-------------------------------------------------------

// --- src/todo/todo.jsx

import React, { Component } from 'react'
import axios from 'axios'

import PageHeader from '../template/pageHeader'
import TodoForm from './todoForm'
import TodoList from './todoList'

const URL = 'http://localhost:3003/api/todos' // backend: 3003, frontend: 8080

export default class Todo extends Component {

    constructor(props) {
        super(props)
        this.state = { description: '', list: [] }

        this.handleAdd = this.handleAdd.bind(this)
        this.handleChange = this.handleChange.bind(this)
    }

    handleChange(e) {
        this.setState({ ...this.state, description: e.target.value })
    }

    handleAdd() {
        const description = this.state.description
        axios.post(URL, { description })
            .then(resp => console.log('Funcionou! :: ', description))
    }

    render() {
        return (
            <div>
                <PageHeader name='Tarefas' small='Cadastro'></PageHeader>
                <TodoForm description={this.state.description}
                    handleChange={this.handleChange}
                    handleAdd={this.handleAdd} />
                <TodoList />
            </div>
        )
    }
}

// --- src/todo/todoForm.jsx

import React from 'react'
import Grid from '../template/grid'
import IconButton from '../template/iconButton'

export default props => (
    <div role='form' className='todoForm'>
        <Grid cols='12 9 10'>
            <input id='description' className='form-control' placeholder='Adicione uma tarefa'
            onChange={props.handleChange}
            value={props.description} />
        </Grid>
        <Grid cols='12 3 2'>
            <IconButton style="primary" icon="plus" onClick={props.handleAdd}></IconButton>
        </Grid>
    </div>
)


-------------------------------------------------------
Aula 79 - Conslusão do TodoApp
-------------------------------------------------------

// --- src/todo/todo.jsx

import React, { Component } from 'react'
import axios from 'axios'

import PageHeader from '../template/pageHeader'
import TodoForm from './todoForm'
import TodoList from './todoList'

const URL = 'http://localhost:3003/api/todos' // backend: 3003, frontend: 8080

export default class Todo extends Component {

    constructor(props) {
        super(props)
        this.state = { description: '', list: [] }

        this.handleAdd = this.handleAdd.bind(this)
        this.handleRemove = this.handleRemove.bind(this)
        this.handleChange = this.handleChange.bind(this)
        this.handleMarkAsDone = this.handleMarkAsDone.bind(this)
        this.handleMarkAsPending = this.handleMarkAsPending.bind(this)
        this.handleSearch = this.handleSearch.bind(this)
        this.handleClear = this.handleClear.bind(this)

        this.refresh()

        /*
        * O this em funções normais, é baseado em quem chamou,
        * ele muda o valor de acordo de quem o chamou.
        * 
        * Acima, o this fica amarrado para apontar para a própria classe.
        */
    }

    refresh(description = '') {
        const search = description ? `&description__regex=/${description}/i` : ''
        axios.get(`${URL}?sort=-createdAt${search}`)
            .then(resp => this.setState({ ...this.state, description, list: resp.data }))
    }

    handleSearch() {
        this.refresh(this.state.description)
    }

    // Vai escutar o onChange do input para estar sempre atualizando o estado baseado no que o user digitar
    handleChange(e) {
        this.setState({ ...this.state, description: e.target.value })
    }

    handleAdd() {
        const description = this.state.description
        axios.post(URL, { description })
            .then(resp => this.refresh())
    }

    handleRemove(todo) {
        axios.delete(`${URL}/${todo._id}`)
            .then(resp => this.refresh(this.state.description))
    }

    handleMarkAsDone(todo) {
        const obj = { ...todo, done: true }
        console.log('Obj: ', obj)
        axios.put(`${URL}/${todo._id}`, { ...todo, done: true })
            .then(resp => this.refresh(this.state.description))
    }

    handleMarkAsPending(todo) {
        const obj = { ...todo, done: false }
        console.log('Obj: ', obj)
        axios.put(`${URL}/${todo._id}`, { ...todo, done: false })
            .then(resp => this.refresh(this.state.description))
    }

    handleClear() {
        this.refresh()
    }

    render() {
        return (
            <div>
                <PageHeader name='Tarefas' small='Cadastro'></PageHeader>
                <TodoForm
                    description={this.state.description}
                    handleChange={this.handleChange}
                    handleAdd={this.handleAdd}
                    handleSearch={this.handleSearch}
                    handleClear={this.handleClear} />
                <TodoList
                    list={this.state.list}
                    handleRemove={this.handleRemove}
                    handleMarkAsDone={this.handleMarkAsDone}
                    handleMarkAsPending={this.handleMarkAsPending} />
            </div>
        )
    }
}

// --- src/todo/todoForm.jsx

import React from 'react'
import Grid from '../template/grid'
import IconButton from '../template/iconButton'

export default props => {

    // Atalhos do teclado
    // Enter            :: adiciona nova tarefa
    // Enter + Shift    :: pesquisa
    // Escape           :: clear
    const keyHandler = e=>{
        if (e.key === 'Enter') {
            e.shiftKey ? props.handleSearch() : props.handleAdd()
        } else if (e.key === 'Escape') {
            props.handleClear()
        }
    }
    return (
        <div role='form' className='todoForm'>
            <Grid cols='12 9 10'>
                <input id='description' className='form-control' placeholder='Adicione uma tarefa'
                    onChange={props.handleChange}
                    onKeyUp={keyHandler}
                    value={props.description} />
            </Grid>
            <Grid cols='12 3 2'>
                <IconButton style="primary" icon="plus" onClick={props.handleAdd}></IconButton>
                <IconButton style="info" icon="search" onClick={props.handleSearch}></IconButton>
                <IconButton style="default" icon="close" onClick={props.handleClear}></IconButton>
            </Grid>
        </div>
    )
}

// --- src/todo/todoList

import React from 'react'
import IconButton from '../template/iconButton'

export default props => {

    const renderRows = () => {
        const list = props.list || []
        return list.map(todo => (
            <tr key={todo._id}>
                <td className={todo.done ? 'markedAsDone' : ''}>{todo.description}</td>
                <td>
                    <IconButton style='success' icon='check' onClick={() => props.handleMarkAsDone(todo)} hide={todo.done}></IconButton>
                    <IconButton style='warning' icon='undo' onClick={() => props.handleMarkAsPending(todo)} hide={!todo.done}></IconButton>
                    <IconButton style='danger' icon='trash-o' onClick={() => props.handleRemove(todo)} hide={!todo.done}></IconButton>
                </td>
            </tr>
        ))
    }

    return (
        <table className='table'>
            <thead>
                <tr>
                    <th>Descrição</th>
                    <th className='tableActions'>Ações</th>
                </tr>
            </thead>
            <tbody>
                {renderRows()}
            </tbody>
        </table>
    )
}

// --- src/template/cutom.css

.btn {
    margin-right: 5px;
}

.markedAsDone {
    text-decoration: line-through;
    color: #777;
}

.tableActions {
    width: 105px;
}

.todoForm {
    padding-bottom: 60px;
}


-------------------------------------------------------
Aula 78 - Entendendo Redux
-------------------------------------------------------

O Redux tem a ideia de trazer os estados para um local centralizado.

Middlewares no Redux
Realiza opoerações com o objeto (dados) retornados pela função, antes de ser passado para o dispatch.

# Como uma visão geral, o Redux tem o seguinte fluxo:

A partir de um evento, é chamada uma função que pode receber parametros (Action Creator),
e retorna um objeto (Action), e esse objeto é passado para várias funções (Reducers),
e essas funções então geram o estado na versão mais atual.

# Nomeclatura no Redux

- Action Creator (lógica da funcao): é uma função síncrona que retorna uma Action.
  Retorna sempre um objeto, que dentro dele pode ter uma Promise, mas ele nunca irá retornar uma Promise do Action Creator.

- Action (dados): é um objeto que tem pelo menos um atributo type ("tipo da action").
  Uma Action pode ter outros dados.

- Reducers (funções do dispatch): são funções puras (função que não gera efeito colateral), ou seja,
  sempre que passar um determinado param para essa funcao ela irá retornar sempre a mesma resposta,
  porque ela não pega nenhuma info externa à função e não gera nenhuma alteração externa a funcao 
  (passamos params e ela retorna params), não alteramos os params que foram passados, mas sim geramos 
  novas versões desses params (geramos um clone do objeto com uma nova versão). => Tem a ver com os 
  princípios da programação funcional que tem a ver com o Redux.
  Temos um reducer para cada atributo do estado.
  O papel dele é receber o estado anterior, receber a ação que aconteceu (a Action) e então gerar 
  um novo atributo (uma nova versão do estado).
  Dentro dos Reducers temos a Action >> Atributo type, sendo possível analisar se a action.type é
  igual a outro valor, para daí disparar uma ação.

# Anatomia de uma Action

{
    type: 'ALGUM_EVENTO_OCORREU',
    payload: {
        /* Aqui estão os dados */
    }
}

type: String => nome da Action
payload: Obj => dados associados a esse evento

Ex 1: gerar um evento que vai alterar um número.
{
    type: 'NUMERO_ALTERADO',        // nome do evento
    payload: 12                     // dado associado ao evento
}

Ex 2: obter a lista de produtos.
{
    type: 'LISTA_PRODUTOS_CHEGOU',
    payload: [
        { id: 1, nome: 'Caneta', preco: 3.5 },
        { id: 2, nome: 'Lapis', preco: 2.5 },
        { id: 3, nome: 'Caderno', preco: 12.9 },
    ]
}

Ex 3: logout de um user.
{
    type: 'USER_SAIU',
}

# Anatomia de um Action Creator (função que retorna uma Action )

Ex 4:
function fazerAlgo(param) {
    /* logica */
    return {
        type: 'ALGUM_EVENTO_OCORREU',
        payload: { /* ... */ }
    }
}

Ex 5: payload retornando uma chamada http, neste caso, uma Promise
function obterProdutos() {
    /* logica */
    return {
        type: 'OBTER_PRODUTOS',
        payload: axios.get('http://url)     // É possível retornar uma Promise
    }
}

Para que isto funcione corretamente, tem que ter um Middleware para esperar a Promise ser resolvida, 
para aí, ele entrar no Dispatch já com os dados obtidos do backend.

# Anatomia do Estado - compartilhado na app -

Um estado é apenas um objeto chave:valor, e ele é gerado a partir dos Reducers.

Ex 6: Estado (no decorrer do programa poderão existir várias versões do estado)
{
    produtos: [ /* ... */ ],        // o valor pode ser um array, objeto, string, número, boolean
    autenticacao: { /* ... */ }
}

Ex 6: Reducers
{
    produtos: function() {},
    autenticacao: function() {}
}

Ex 7: Reducers (mais a fundo)
{
    produtos: function(estadoAnterior, acao) {
        // logica
        return proximoEstado
    },
    autenticacao: function(estadoAnterior, acao) {
        // logica
        return proximoEstado
    },
}

Obs 1: como já foi mencionado, essas funcoes dos Reducers são funcoes puras, ou seja, elas não acessam
backend da app, elas apenas com o estado anterior e a acao que foi gerada, evoluem para o próximo
estado da app.

Obs 2: o "estadoAnterior" passado para a funcao "produtos" é diferente do que foi passado para a funcao
"autenticacao", porque recebe apenas o estado correspondente à tal função.

Ex 8: Reducers colocados em arquivos.
O que é comum, na realidade, é definir a função reducer num arquivo e exportá-lo, e então no estado,
é chamado pelo seu import:

// Reducers
{
    produtos: produtosReducer,              // *ficheiro 1
    autenticacao: autenticacaoReducer       // *ficheiro 2
}

* fichero 1
const reducer = (state, action) => {
    // logica
    return nextState
}

export default reducer

* fichero 2
const reducer = (state, action) => {
    // logica
    return nextState
}

export default reducer


-------------------------------------------------------
Aula 88 - Conectando Componentes com Redux
-------------------------------------------------------

Como integrar o Redux dentro de um componente?
Padrão de projeto "Decorator".
O Decorator substitui a herança, ele usa a composição para que se possa acrescentar coisas a um determinado0 objeto (uma funcao, por exemplo).
Em JS é possível instanciar uma funcao para gerar um objeto.

import { connect } from 'react-redux'
O "connect" será o responsável por conectar o componente ao estado a app.

A partir desta aula, foi implementado o Redux na app "redux-simples-sem-redux", ao qual chamei agora de "redux-simples".


-------------------------------------------------------
Aula 96 - Adicionando Redux na App TodoApp 
-------------------------------------------------------

Copiei a pasta do todo-app e renomeei para todo-app-redux.
Instalei no frontend as seguintes dependências:
- npm i --save-dev redux@3.6.0 react-redux@5.0.2

redux@3.6.0             Biblioteca do Redux
react-redux@5.0.2       Biblioteca que faz a conexão do React com o Redux


-------------------------------------------------------
Aula 97 - Confiurando Reducers 
-------------------------------------------------------

// --- main/reducers.js

import { combineReducers } from 'redux'

// Reducer que vai combinar todos os outros
const rootReducer = combineReducers({
    todo: () => ({
        description: 'Ler livro',
        list: [{
            _id: 1,
            description: 'Pagar fatura do cartão',
            done: true
        }, {
            _id: 2,
            description: 'Reunião com a equipe às 10:00',
            done: false
        }, {
            _id: 3,
            description: 'Consulta médica na terça depois do almoço',
            done: false
        }]
    })
})

// Este reducer será usado na config do index.js
export default rootReducer


-------------------------------------------------------
Aula 98 - Confiurando o Redux
-------------------------------------------------------

// --- index.jsx

import React from 'react'
import ReactDom from 'react-dom' // Arquivo que interage com o DOM da página

// Imports para o Redux
import { createStore } from 'redux'
import { Provider } from 'react-redux'


import App from './main/app'
import reducers from './main/reducers' // Import dos reducers criados

// Criação da store :: recebe o resultado do método createStore, passando os reducers como parâmetro
// store => é o objeto estado da app, que será controlado pelo Redux
const store = createStore(reducers)

ReactDom.render(
    <Provider store={store}>
        <App />
    </Provider>,
    document.getElementById('app'))

// Antes de aplicar o Redux
// ReactDom.render(<App />, document.getElementById('app'))


-------------------------------------------------------
Aula 99 - Conectar o TodoList com Redux
-------------------------------------------------------

// --- todo/todoList.jsx

import React from 'react'
import { connect } from 'react-redux' // Conecta esse componente com os dados que estão na store e com as Actios que serão disparadas
import IconButton from '../template/iconButton'

const TodoList = props => {

    const renderRows = () => {
        const list = props.list || []
        return list.map(todo => (
            <tr key={todo._id}>
                <td className={todo.done ? 'markedAsDone' : ''}>{todo.description}</td>
                <td>
                    <IconButton style='success' icon='check' onClick={() => props.handleMarkAsDone(todo)} hide={todo.done}></IconButton>
                    <IconButton style='warning' icon='undo' onClick={() => props.handleMarkAsPending(todo)} hide={!todo.done}></IconButton>
                    <IconButton style='danger' icon='trash-o' onClick={() => props.handleRemove(todo)} hide={!todo.done}></IconButton>
                </td>
            </tr>
        ))
    }

    return (
        <table className='table'>
            <thead>
                <tr>
                    <th>Descrição</th>
                    <th className='tableActions'>Ações</th>
                </tr>
            </thead>
            <tbody>
                {renderRows()}
            </tbody>
        </table>
    )
}

// Método que vai mapear o estado do Redux com as props do objeto
const mapStateToProps = state => ({list: state.todo.list})

// Exportar o componente decorado (padrão de projeto Decorator)
export default connect(mapStateToProps)(TodoList)


-------------------------------------------------------
Aula 104 - Aplicando Middleware (Redux-Promise)
-------------------------------------------------------

Middleware que vai ficar entre a chamada do Action Creator e o

Instalar o middleware:
- npm i --save-dev redux-promise@0.5.3


-------------------------------------------------------
Aula 107 - Middleware (Redux-Multi)
-------------------------------------------------------

Permite que um action creator retorne um array com várias actions.

Installarion
- npm i --save-dev redux-multi@0.1.12

// --- index.js

// novo import
import multi from 'redux-multi'

// adicionado novo middleware na lista de middlewares para aplicar
const store = applyMiddleware(multi, promise)(createStore)(reducers, devTools)

// --- todo/todoActions.js

// return devolvendo um array de ações

export const add = (description) => {
    const request = axios.post(URL, { description })
    return [
        { type: 'TOOD_ADDED', payload: request },
        search()
    ]
}


-------------------------------------------------------
Aula 108 - Middleware (Redux-Thunk)
-------------------------------------------------------

Para garantir que a action search() só seja chamada após ter inserido a nova tarefa (ou seja, depois de ter feito o requeste.post(URL, { description })).
Com o thunk podemos utilizar o dispatch de forma manual, chamando-o exatamente onde quisermos.

O "multi" chama várias ações ao mesmo tempo, mas com o "thunk" cada ação espera a ação anterior ser finalizada.

Installation do middleware
- npm i --save-dev redux-thunk@2.2.0

// --- index.js

import thunk from 'redux-thunk'
const store = applyMiddleware(thunk, multi, promise)(createStore)(reducers, devTools)

// --- todo/todoActions.js

// return devolvendo um método que vai receber como param, o dispatch, com o axios utilizando then() para ter um processo síncrono de espera para cada resposta

export const add = (description) => {
    // Retornando um método que vai receber como param, o dispatch
    // Dispatch é quem envia a action para todos os reducers
    return dispatch => {
        axios.post(URL, { description })
            .then(resp => dispatch({type: 'TODO_ADDED', payload: resp.data}))
            .then(resp => dispatch(search()))
    }
}

-------------------------------------------------------
Anotações e links 
-------------------------------------------------------

# How to fix Git always asking for user credentials ((!)FUNCIONOU)
https://www.freecodecamp.org/news/how-to-fix-git-always-asking-for-user-credentials/
    git config --global credential.helper store