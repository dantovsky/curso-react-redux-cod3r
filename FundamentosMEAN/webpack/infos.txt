O Webpack é um pacote que gerencia os pacotes do Node, gerando uma pasta dist com o seu código compilado. É semelhante ao Gulp.
O Webpack tem apenas um ponto de entrada, um arquivo JS onde inicia toda a app, e a partir deste arquivo, vai chamando as suas dependências.
=> Ele é completamente contrado no sistema de módulos.

# Passos realizados
- npm init -y => criamos o package.json, onde adicionamos o script "start", e adicionamos as devDependencies:
{
  "name": "capitulo-webpack",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "4.8.1",
    "webpack-cli": "2.1.3"
  }
}
- npm install => instalamos as dependencias
- criação do arquivo "webpack.config.js", com o menor tamanho possível, obtendo um build funcional:
const webpack = require('webpack')
module.exports = {
    mode: 'development',
    entry: './src/principal.js'
}
- npm start => gera uma pasta dist
- npm start && node dist/main.js

# Loaders utilizados no Webpack

"file-loader"                             => Tratar os arquivos de imagens (ex: referencias a files no CSS): necessita criar uma "rule"
"cross-env"                               => Serve para setar uma var de ambiente (nodeEnv) de uma única forma, pois a forma em Linux e Mac é diferente da forma para Windows
"optimize-css-assets-webpack-plugin"      => CSS minifyer
"uglifyjs-webpack-plugin"                 => JS minifyer (embora o padrão, sem este módulo, já faça minificação)
"mini-css-extract-plugin:": "0.4.0",      => extrair o CSS para um arquivo específico (ele é conflitante com o 'style-loader')
"css-loader": "0.28.11",                  => interpreta @import, url()...
"style-loader": "0.21.0",                 => Adiciona CSS a DOM injetando a tag <style>
"node-sass": "4.9.0",
"sass-loader": "7.0.1",                   => usado no Webpack (depende do node-sass para funcionar)

Copy:

"devDependencies": {

  "node-sass": "4.9.0",
  "sass-loader": "7.0.1",
  "mini-css-extract-plugin": "0.4.0",
  "css-loader": "0.28.11",
  "style-loader": "0.21.0",
  "webpack": "4.8.1",
  "webpack-cli": "2.1.3"
}

# Comandos para correr o Webpack

- npm start         => iniciar no modo development
- npm run build     => iniciar no modo production

--------------------------------------------------------
Adicionando Webserver
--------------------------------------------------------

// --- package.json :: Adicionar o package em devDependencies

webpack-dev-server      => Library para implementar um servidor de desenvolvimento.

Alterar o script.start,
de:
  "start": "webpack"
Para
  "start": "webpack-dev-server"
Pois assim, o webpack-dev-server vai chamar internamente o Webpack e vai adicionar um servidor executando na porta 9000
(ou especificada no ficheiro webpack.config.js na parte devServer.port).

/ --- webpack.config.js

...
devServer: {
    contentBase: "./public",
    port: 9000
},
...

--------------------------------------------------------
Configs finais
--------------------------------------------------------

// --- package.json

{
  "name": "capitulo-webpack",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack-dev-server",
    "build": "cross-env NODE_ENV=production webpack"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack-dev-server": "3.1.4",
    "file-loader": "1.1.11",
    "cross-env": "5.1.5",
    "optimize-css-assets-webpack-plugin": "4.0.1",
    "uglifyjs-webpack-plugin": "1.2.5",
    "node-sass": "4.14.1",
    "css-loader": "0.28.11",
    "mini-css-extract-plugin": "0.4.0",
    "sass-loader": "7.0.1",
    "style-loader": "0.21.0",
    "webpack": "4.8.1",
    "webpack-cli": "2.1.3"
  }
}

// --- webpack

const modoDev = process.env.NODE_ENV !== 'production'
const webpack = require('webpack')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const UglifyJsPlugin = require('uglifyjs-webpack-plugin')
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')

module.exports = {
    mode: modoDev ? 'development' : 'production',
    entry: './src/principal.js',
    output: {
        filename: 'principals.js',
        path: __dirname + '/public'
    },
    devServer: {
        contentBase: "./public",
        port: 9000
    },
    optimization: {
        minimizer: [
            new UglifyJsPlugin({
                cache: true,
                parallel: true
            }),
            new OptimizeCSSAssetsPlugin({})
        ]
    },
    plugins: [
        new MiniCssExtractPlugin({
            filename: "estilo.css" // nome do arquivo gerado
        })
    ],
    module: {
        rules: [{
            test: /\.s?[ac]ss$/, // Encontra arquivos .css, .scss, .sass // Somente para encontrar CSS: /\.css$/,
            use: [
                MiniCssExtractPlugin.loader, // extrair o CSS para um arquivo específico (ele é conflitante com o 'style-loader')
                // 'style-loader', // Adiciona CSS a DOM injetando a tag <style>
                'css-loader', // interpreta @import, url()...
                'sass-loader',
            ]
        }, {
            test: /\.(png|svg|jpg|gif)$/,
            use: ['file-loader']
        }]
    }
}

--------------------------------------------------------
Ocorrências
--------------------------------------------------------

# Visual Code sempre pede "retry as admin"

Visual Code sempre pede "retry as admin" quando tenta salvar um arquivo, tendo que inserir a senha de root todas as vezes.
sudo chown -c -R $USER:$USER (project folder)
Ex: na pasta onde tenho o projeto git fiz:
sudo chown -c -R $USER:$USER .

https://www.quora.com/Every-single-time-when-saving-my-code-in-visual-studio-code-on-Linux-I-have-to-type-in-my-password-retry-as-admin-How-can-I-bypass-that